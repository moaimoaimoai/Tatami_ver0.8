{"ast":null,"code":"import _regeneratorRuntime from\"/Users/hirakuono/Desktop/\\u958B\\u767A/tatamiproject_0.7_local/tatami-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/hirakuono/Desktop/\\u958B\\u767A/tatamiproject_0.7_local/tatami-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import area from\"react-easy-crop\";/**\n * urlをもとにimage要素を作成\n */export var createImage=function createImage(url){return new Promise(function(resolve,reject){var image=new Image();image.addEventListener(\"load\",function(){return resolve(image);});image.addEventListener(\"error\",function(error){return reject(error);});// CodeSandboxでCORSエラーを回避するために必要\nimage.setAttribute(\"crossOrigin\",\"anonymous\");image.src=url;});};/**\n * 画像トリミングを行い新たな画像urlを作成\n */export default function getCroppedImg(_x,_x2){return _getCroppedImg.apply(this,arguments);}function _getCroppedImg(){_getCroppedImg=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(imageSrc,pixelCrop){var image,canvas,ctx,data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return createImage(imageSrc);case 2:image=_context.sent;canvas=document.createElement(\"canvas\");ctx=canvas.getContext(\"2d\");if(ctx){_context.next=7;break;}return _context.abrupt(\"return\",\"\");case 7:// canvasサイズを設定\ncanvas.width=image.width;canvas.height=image.height;// canvas上に画像を描画\nctx.drawImage(image,0,0);// トリミング後の画像を抽出\ndata=ctx.getImageData(pixelCrop.x,pixelCrop.y,pixelCrop.width,pixelCrop.height);// canvasのサイズ指定(切り取り後の画像サイズに更新)\ncanvas.width=pixelCrop.width;canvas.height=pixelCrop.height;// 抽出した画像データをcanvasの左隅に貼り付け\nctx.putImageData(data,0,0);// canvasを画像に変換\nreturn _context.abrupt(\"return\",new Promise(function(resolve,reject){canvas.toBlob(function(file){if(file!==null)resolve(file);},\"image/jpeg\");}));case 15:case\"end\":return _context.stop();}},_callee);}));return _getCroppedImg.apply(this,arguments);}","map":{"version":3,"names":["area","createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getCroppedImg","_x","_x2","_getCroppedImg","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","imageSrc","pixelCrop","canvas","ctx","data","wrap","_callee$","_context","prev","next","sent","document","createElement","getContext","abrupt","width","height","drawImage","getImageData","x","y","putImageData","toBlob","file","stop"],"sources":["/Users/hirakuono/Desktop/開発/tatamiproject_0.7_local/tatami-react/src/components/getCroppedImg.jsx"],"sourcesContent":["import area from \"react-easy-crop\";\n\n/**\n * urlをもとにimage要素を作成\n */\nexport const createImage = (url: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", (error) => reject(error));\n    // CodeSandboxでCORSエラーを回避するために必要\n    image.setAttribute(\"crossOrigin\", \"anonymous\");\n    image.src = url;\n  });\n\n/**\n * 画像トリミングを行い新たな画像urlを作成\n */\nexport default async function getCroppedImg(\n  imageSrc: string,\n  pixelCrop: Area\n): Promise<string> {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n  if (!ctx) {\n    return \"\";\n  }\n\n  // canvasサイズを設定\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  // canvas上に画像を描画\n  ctx.drawImage(image, 0, 0);\n\n  // トリミング後の画像を抽出\n  const data = ctx.getImageData(\n    pixelCrop.x,\n    pixelCrop.y,\n    pixelCrop.width,\n    pixelCrop.height\n  );\n\n  // canvasのサイズ指定(切り取り後の画像サイズに更新)\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // 抽出した画像データをcanvasの左隅に貼り付け\n  ctx.putImageData(data, 0, 0);\n\n  // canvasを画像に変換\n  return new Promise((resolve, reject) => {\n    canvas.toBlob((file) => {\n      if (file !== null) resolve(file);\n    }, \"image/jpeg\");\n  });\n}\n"],"mappings":"gVAAA,MAAO,CAAAA,IAAI,KAAM,iBAAiB,CAElC;AACA;AACA,GACA,MAAO,IAAM,CAAAC,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIC,GAAW,QACrC,IAAI,CAAAC,OAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK,CAC/B,GAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,KAAK,CAAC,CAAC,CACzBD,KAAK,CAACE,gBAAgB,CAAC,MAAM,CAAE,iBAAM,CAAAJ,OAAO,CAACE,KAAK,CAAC,GAAC,CACpDA,KAAK,CAACE,gBAAgB,CAAC,OAAO,CAAE,SAACC,KAAK,QAAK,CAAAJ,MAAM,CAACI,KAAK,CAAC,GAAC,CACzD;AACAH,KAAK,CAACI,YAAY,CAAC,aAAa,CAAE,WAAW,CAAC,CAC9CJ,KAAK,CAACK,GAAG,CAAGT,GAAG,CACjB,CAAC,CAAC,GAEJ;AACA;AACA,GACA,uBAA8B,CAAAU,aAAaA,CAAAC,EAAA,CAAAC,GAAA,SAAAC,cAAA,CAAAC,KAAA,MAAAC,SAAA,GAwC1C,SAAAF,eAAA,EAAAA,cAAA,CAAAG,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAxCc,SAAAC,QACbC,QAAgB,CAChBC,SAAe,MAAAjB,KAAA,CAAAkB,MAAA,CAAAC,GAAA,CAAAC,IAAA,QAAAP,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAE,IAAA,SAEK,CAAA9B,WAAW,CAACqB,QAAQ,CAAC,QAAnChB,KAAK,CAAAuB,QAAA,CAAAG,IAAA,CACLR,MAAM,CAAGS,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CACzCT,GAAG,CAAGD,MAAM,CAACW,UAAU,CAAC,IAAI,CAAC,IAE9BV,GAAG,EAAAI,QAAA,CAAAE,IAAA,iBAAAF,QAAA,CAAAO,MAAA,UACC,EAAE,SAGX;AACAZ,MAAM,CAACa,KAAK,CAAG/B,KAAK,CAAC+B,KAAK,CAC1Bb,MAAM,CAACc,MAAM,CAAGhC,KAAK,CAACgC,MAAM,CAE5B;AACAb,GAAG,CAACc,SAAS,CAACjC,KAAK,CAAE,CAAC,CAAE,CAAC,CAAC,CAE1B;AACMoB,IAAI,CAAGD,GAAG,CAACe,YAAY,CAC3BjB,SAAS,CAACkB,CAAC,CACXlB,SAAS,CAACmB,CAAC,CACXnB,SAAS,CAACc,KAAK,CACfd,SAAS,CAACe,MACZ,CAAC,CAED;AACAd,MAAM,CAACa,KAAK,CAAGd,SAAS,CAACc,KAAK,CAC9Bb,MAAM,CAACc,MAAM,CAAGf,SAAS,CAACe,MAAM,CAEhC;AACAb,GAAG,CAACkB,YAAY,CAACjB,IAAI,CAAE,CAAC,CAAE,CAAC,CAAC,CAE5B;AAAA,OAAAG,QAAA,CAAAO,MAAA,UACO,GAAI,CAAAjC,OAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK,CACtCmB,MAAM,CAACoB,MAAM,CAAC,SAACC,IAAI,CAAK,CACtB,GAAIA,IAAI,GAAK,IAAI,CAAEzC,OAAO,CAACyC,IAAI,CAAC,CAClC,CAAC,CAAE,YAAY,CAAC,CAClB,CAAC,CAAC,2BAAAhB,QAAA,CAAAiB,IAAA,MAAAzB,OAAA,GACH,UAAAN,cAAA,CAAAC,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module"}