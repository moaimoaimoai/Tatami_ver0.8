{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeHttpClientResponse = exports.NodeHttpClient = void 0;\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst HttpClient_js_1 = require(\"./HttpClient.js\");\nconst defaultHttpAgent = new http.Agent({\n  keepAlive: true\n});\nconst defaultHttpsAgent = new https.Agent({\n  keepAlive: true\n});\n/**\n * HTTP client which uses the Node `http` and `https` packages to issue\n * requests.`\n */\nclass NodeHttpClient extends HttpClient_js_1.HttpClient {\n  constructor(agent) {\n    super();\n    this._agent = agent;\n  }\n  /** @override. */\n  getClientName() {\n    return 'node';\n  }\n  makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n    const isInsecureConnection = protocol === 'http';\n    let agent = this._agent;\n    if (!agent) {\n      agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n    }\n    const requestPromise = new Promise((resolve, reject) => {\n      const req = (isInsecureConnection ? http : https).request({\n        host: host,\n        port: port,\n        path,\n        method,\n        agent,\n        headers,\n        ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5'\n      });\n      req.setTimeout(timeout, () => {\n        req.destroy(HttpClient_js_1.HttpClient.makeTimeoutError());\n      });\n      req.on('response', res => {\n        resolve(new NodeHttpClientResponse(res));\n      });\n      req.on('error', error => {\n        reject(error);\n      });\n      req.once('socket', socket => {\n        if (socket.connecting) {\n          socket.once(isInsecureConnection ? 'connect' : 'secureConnect', () => {\n            // Send payload; we're safe:\n            req.write(requestData);\n            req.end();\n          });\n        } else {\n          // we're already connected\n          req.write(requestData);\n          req.end();\n        }\n      });\n    });\n    return requestPromise;\n  }\n}\nexports.NodeHttpClient = NodeHttpClient;\nclass NodeHttpClientResponse extends HttpClient_js_1.HttpClientResponse {\n  constructor(res) {\n    // @ts-ignore\n    super(res.statusCode, res.headers || {});\n    this._res = res;\n  }\n  getRawResponse() {\n    return this._res;\n  }\n  toStream(streamCompleteCallback) {\n    // The raw response is itself the stream, so we just return that. To be\n    // backwards compatible, we should invoke the streamCompleteCallback only\n    // once the stream has been fully consumed.\n    this._res.once('end', () => streamCompleteCallback());\n    return this._res;\n  }\n  toJSON() {\n    return new Promise((resolve, reject) => {\n      let response = '';\n      this._res.setEncoding('utf8');\n      this._res.on('data', chunk => {\n        response += chunk;\n      });\n      this._res.once('end', () => {\n        try {\n          resolve(JSON.parse(response));\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n}\nexports.NodeHttpClientResponse = NodeHttpClientResponse;","map":{"version":3,"names":["Object","defineProperty","exports","value","NodeHttpClientResponse","NodeHttpClient","http","require","https","HttpClient_js_1","defaultHttpAgent","Agent","keepAlive","defaultHttpsAgent","HttpClient","constructor","agent","_agent","getClientName","makeRequest","host","port","path","method","headers","requestData","protocol","timeout","isInsecureConnection","requestPromise","Promise","resolve","reject","req","request","ciphers","setTimeout","destroy","makeTimeoutError","on","res","error","once","socket","connecting","write","end","HttpClientResponse","statusCode","_res","getRawResponse","toStream","streamCompleteCallback","toJSON","response","setEncoding","chunk","JSON","parse","e"],"sources":["/Users/hirakuono/Desktop/開発/tatamiproject_0.8_local/tatami-react/node_modules/stripe/cjs/net/NodeHttpClient.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeHttpClientResponse = exports.NodeHttpClient = void 0;\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst HttpClient_js_1 = require(\"./HttpClient.js\");\nconst defaultHttpAgent = new http.Agent({ keepAlive: true });\nconst defaultHttpsAgent = new https.Agent({ keepAlive: true });\n/**\n * HTTP client which uses the Node `http` and `https` packages to issue\n * requests.`\n */\nclass NodeHttpClient extends HttpClient_js_1.HttpClient {\n    constructor(agent) {\n        super();\n        this._agent = agent;\n    }\n    /** @override. */\n    getClientName() {\n        return 'node';\n    }\n    makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n        const isInsecureConnection = protocol === 'http';\n        let agent = this._agent;\n        if (!agent) {\n            agent = isInsecureConnection ? defaultHttpAgent : defaultHttpsAgent;\n        }\n        const requestPromise = new Promise((resolve, reject) => {\n            const req = (isInsecureConnection ? http : https).request({\n                host: host,\n                port: port,\n                path,\n                method,\n                agent,\n                headers,\n                ciphers: 'DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:!MD5',\n            });\n            req.setTimeout(timeout, () => {\n                req.destroy(HttpClient_js_1.HttpClient.makeTimeoutError());\n            });\n            req.on('response', (res) => {\n                resolve(new NodeHttpClientResponse(res));\n            });\n            req.on('error', (error) => {\n                reject(error);\n            });\n            req.once('socket', (socket) => {\n                if (socket.connecting) {\n                    socket.once(isInsecureConnection ? 'connect' : 'secureConnect', () => {\n                        // Send payload; we're safe:\n                        req.write(requestData);\n                        req.end();\n                    });\n                }\n                else {\n                    // we're already connected\n                    req.write(requestData);\n                    req.end();\n                }\n            });\n        });\n        return requestPromise;\n    }\n}\nexports.NodeHttpClient = NodeHttpClient;\nclass NodeHttpClientResponse extends HttpClient_js_1.HttpClientResponse {\n    constructor(res) {\n        // @ts-ignore\n        super(res.statusCode, res.headers || {});\n        this._res = res;\n    }\n    getRawResponse() {\n        return this._res;\n    }\n    toStream(streamCompleteCallback) {\n        // The raw response is itself the stream, so we just return that. To be\n        // backwards compatible, we should invoke the streamCompleteCallback only\n        // once the stream has been fully consumed.\n        this._res.once('end', () => streamCompleteCallback());\n        return this._res;\n    }\n    toJSON() {\n        return new Promise((resolve, reject) => {\n            let response = '';\n            this._res.setEncoding('utf8');\n            this._res.on('data', (chunk) => {\n                response += chunk;\n            });\n            this._res.once('end', () => {\n                try {\n                    resolve(JSON.parse(response));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n}\nexports.NodeHttpClientResponse = NodeHttpClientResponse;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}