{"ast":null,"code":"import area from \"react-easy-crop\";\n\n/**\n * urlをもとにimage要素を作成\n */\nexport const createImage = url => new Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener(\"load\", () => resolve(image));\n  image.addEventListener(\"error\", error => reject(error));\n  // CodeSandboxでCORSエラーを回避するために必要\n  image.setAttribute(\"crossOrigin\", \"anonymous\");\n  image.src = url;\n});\n\n/**\n * 画像トリミングを行い新たな画像urlを作成\n */\nexport default async function getCroppedImg(imageSrc, pixelCrop) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) {\n    return \"\";\n  }\n\n  // canvasサイズを設定\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  // canvas上に画像を描画\n  ctx.drawImage(image, 0, 0);\n\n  // トリミング後の画像を抽出\n  const data = ctx.getImageData(pixelCrop.x, pixelCrop.y, pixelCrop.width, pixelCrop.height);\n\n  // canvasのサイズ指定(切り取り後の画像サイズに更新)\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // 抽出した画像データをcanvasの左隅に貼り付け\n  ctx.putImageData(data, 0, 0);\n\n  // canvasを画像に変換\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(file => {\n      if (file !== null) resolve(file);\n    }, \"image/jpeg\");\n  });\n}","map":{"version":3,"names":["area","createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getCroppedImg","imageSrc","pixelCrop","canvas","document","createElement","ctx","getContext","width","height","drawImage","data","getImageData","x","y","putImageData","toBlob","file"],"sources":["/Users/hirakuono/Desktop/開発/tatamiproject_0.8_local/tatami-react/src/components/getCroppedImg.jsx"],"sourcesContent":["import area from \"react-easy-crop\";\n\n/**\n * urlをもとにimage要素を作成\n */\nexport const createImage = (url: string): Promise<HTMLImageElement> =>\n  new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", (error) => reject(error));\n    // CodeSandboxでCORSエラーを回避するために必要\n    image.setAttribute(\"crossOrigin\", \"anonymous\");\n    image.src = url;\n  });\n\n/**\n * 画像トリミングを行い新たな画像urlを作成\n */\nexport default async function getCroppedImg(\n  imageSrc: string,\n  pixelCrop: Area\n): Promise<string> {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n  if (!ctx) {\n    return \"\";\n  }\n\n  // canvasサイズを設定\n  canvas.width = image.width;\n  canvas.height = image.height;\n\n  // canvas上に画像を描画\n  ctx.drawImage(image, 0, 0);\n\n  // トリミング後の画像を抽出\n  const data = ctx.getImageData(\n    pixelCrop.x,\n    pixelCrop.y,\n    pixelCrop.width,\n    pixelCrop.height\n  );\n\n  // canvasのサイズ指定(切り取り後の画像サイズに更新)\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // 抽出した画像データをcanvasの左隅に貼り付け\n  ctx.putImageData(data, 0, 0);\n\n  // canvasを画像に変換\n  return new Promise((resolve, reject) => {\n    canvas.toBlob((file) => {\n      if (file !== null) resolve(file);\n    }, \"image/jpeg\");\n  });\n}\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,iBAAiB;;AAElC;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,GAAW,IACrC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/B,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;EACzBD,KAAK,CAACE,gBAAgB,CAAC,MAAM,EAAE,MAAMJ,OAAO,CAACE,KAAK,CAAC,CAAC;EACpDA,KAAK,CAACE,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAKJ,MAAM,CAACI,KAAK,CAAC,CAAC;EACzD;EACAH,KAAK,CAACI,YAAY,CAAC,aAAa,EAAE,WAAW,CAAC;EAC9CJ,KAAK,CAACK,GAAG,GAAGT,GAAG;AACjB,CAAC,CAAC;;AAEJ;AACA;AACA;AACA,eAAe,eAAeU,aAAaA,CACzCC,QAAgB,EAChBC,SAAe,EACE;EACjB,MAAMR,KAAK,GAAG,MAAML,WAAW,CAACY,QAAQ,CAAC;EACzC,MAAME,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/C,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;EAEnC,IAAI,CAACD,GAAG,EAAE;IACR,OAAO,EAAE;EACX;;EAEA;EACAH,MAAM,CAACK,KAAK,GAAGd,KAAK,CAACc,KAAK;EAC1BL,MAAM,CAACM,MAAM,GAAGf,KAAK,CAACe,MAAM;;EAE5B;EACAH,GAAG,CAACI,SAAS,CAAChB,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;;EAE1B;EACA,MAAMiB,IAAI,GAAGL,GAAG,CAACM,YAAY,CAC3BV,SAAS,CAACW,CAAC,EACXX,SAAS,CAACY,CAAC,EACXZ,SAAS,CAACM,KAAK,EACfN,SAAS,CAACO,MACZ,CAAC;;EAED;EACAN,MAAM,CAACK,KAAK,GAAGN,SAAS,CAACM,KAAK;EAC9BL,MAAM,CAACM,MAAM,GAAGP,SAAS,CAACO,MAAM;;EAEhC;EACAH,GAAG,CAACS,YAAY,CAACJ,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;;EAE5B;EACA,OAAO,IAAIpB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCU,MAAM,CAACa,MAAM,CAAEC,IAAI,IAAK;MACtB,IAAIA,IAAI,KAAK,IAAI,EAAEzB,OAAO,CAACyB,IAAI,CAAC;IAClC,CAAC,EAAE,YAAY,CAAC;EAClB,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module"}